# Use the Balena Debian base image for Raspberry Pi 5
#FROM balenalib/raspberrypi5-debian:bookworm
FROM balenalib/raspberrypi5-ubuntu:jammy
ARG DEBIAN_FRONTEND=noninteractive

WORKDIR /usr/src/app

ARG MACHINE_NAME=%%BALENA_MACHINE_NAME%%
ARG MACHINE_ARCH=%%BALENA_ARCH%%

# Install required packages and RabbitMQ
RUN apt-get update -y && \
    apt-get install -y curl wget apt-transport-https apt-utils ipcalc nmap nano \
    bind9-dnsutils debian-keyring debian-archive-keyring software-properties-common \
    avahi-daemon avahi-utils dbus telnet systemd libnss-mdns vim build-essential \
    gnupg2 gnupg ca-certificates lsb-release python3-argcomplete unzip \
    python3-venv python3-pip git netcat ncat

RUN systemctl mask \
    dev-hugepages.mount \
    sys-fs-fuse-connections.mount \
    sys-kernel-config.mount \
    display-manager.service \
    getty@.service \
    systemd-logind.service \
    systemd-remount-fs.service \
    getty.target \
    graphical.target

RUN apt-get install locales && locale-gen en_US en_US.UTF-8 \
    && update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8 \
    && export LANG=en_US.UTF-8

# Add the RabbitMQ and Erlang repositories
RUN curl -1sLf \
  'https://dl.cloudsmith.io/public/rabbitmq/rabbitmq-erlang/setup.deb.sh' \
  | bash

RUN curl -1sLf \
  'https://dl.cloudsmith.io/public/rabbitmq/rabbitmq-server/setup.deb.sh' \
  | bash

RUN curl -fsSL https://apt.releases.hashicorp.com/gpg | apt-key add -

RUN wget -O- https://apt.releases.hashicorp.com/gpg | gpg --dearmor \
  | tee /usr/share/keyrings/hashicorp-archive-keyring.gpg > /dev/null

RUN echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] \
  https://apt.releases.hashicorp.com $(lsb_release -cs) main" \
  | tee /etc/apt/sources.list.d/hashicorp.list

RUN curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key \
   -o /usr/share/keyrings/ros-archive-keyring.gpg > /dev/null

RUN echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] \
    http://packages.ros.org/ros2/ubuntu $(lsb_release -cs) main" | \
    tee /etc/apt/sources.list.d/ros2.list

RUN add-apt-repository ppa:rabbitmq/rabbitmq-erlang && apt-get install -y rabbitmq-server --fix-missing
RUN apt-get install -y consul

RUN apt-get install -y \
    ros-humble-ros-base \
    ros-humble-demo-nodes-cpp \
    ros-humble-demo-nodes-py \
    ros-humble-mqtt-client \
    ros-humble-turtlebot4-cpp-tutorials \
    ros-humble-turtlebot4-diagnostics \
    ros-humble-turtlebot4-python-tutorials \
    ros-humble-turtlebot4-msgs \
    ros-humble-turtlebot4-robot \
    ros-humble-turtlebot4-tests

RUN apt-get install -y python3-paho-mqtt paho.mqtt.c-examples \
    mosquitto mosquitto-clients mosquitto-dev python3-pika

# Copy RabbitMQ configuration files (adjust according to your cluster setup)
COPY config/rabbitmq.conf /etc/rabbitmq/rabbitmq.conf
COPY config/enabled_plugins /etc/rabbitmq/enabled_plugins
COPY config/avahi-daemon.conf /etc/avahi/avahi-daemon.conf
COPY config/rabbitmq.service /etc/avahi/services/rabbitmq.service
COPY config/nsswitch.conf /etc/nsswitch.conf
COPY config/rabbitmq-consul.json /etc/consul.d/rabbitmq.json
COPY src/* /usr/src/app/

#RUN rabbitmq-plugins enable --offline rabbitmq_peer_discovery_consul
#RUN rabbitmq-plugins enable --offline rabbitmq_mqtt
#RUN rabbitmq-plugins enable --offline rabbitmq_web_mqtt
#RUN rabbitmq-plugins enable --offline rabbitmq_web_mqtt_examples

RUN git clone https://github.com/rabbitmq/rabbitmq-tutorials.git

# Expose avahi ports
EXPOSE 5353 3689

# Expose consul ports
EXPOSE 8300 8301 8302 8500

# Expose necessary RabbitMQ ports
EXPOSE 4369 5672 6000-6500 15672 25672 35672-35682

# Copy and use an entrypoint script to properly set environment variables and start RabbitMQ server
COPY entrypoint.sh /usr/local/bin/entrypoint.sh
RUN chmod +x /usr/local/bin/entrypoint.sh

RUN echo "source /opt/ros/humble/setup.bash" >> ~/.bashrc

ENTRYPOINT ["/usr/local/bin/entrypoint.sh"]
